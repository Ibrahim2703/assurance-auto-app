name: Build Android APK

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        ndk-version: '25.2.9519653'
        cmake-version: '3.22.1'
    
    - name: Accept Android SDK licenses
      run: |
        echo "y" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        echo "y" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-33"
        echo "y" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-pip \
          python3-setuptools \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0 \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          autoconf \
          libtool \
          pkg-config
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer==1.5.0
        pip install cython==0.29.33
        pip install kivymd
        pip install kivy[base]
    
    - name: Create main.py if not exists
      run: |
        if [ ! -f "main.py" ]; then
          cat > main.py << 'EOF'
        from kivymd.app import MDApp
        from kivymd.uix.label import MDLabel
        from kivymd.uix.screen import MDScreen

        class AssuranceAutoApp(MDApp):
            def build(self):
                screen = MDScreen()
                label = MDLabel(
                    text="Assurance Auto",
                    halign="center",
                    theme_text_color="Primary"
                )
                screen.add_widget(label)
                return screen

        if __name__ == "__main__":
            AssuranceAutoApp().run()
        EOF
        fi
    
    - name: Create buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        title = Assurance Auto
        package.name = assuranceauto
        package.domain = com.assurance.auto
        
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,json
        source.exclude_dirs = tests, bin, venv, .git, __pycache__
        
        version = 1.0
        
        requirements = python3,kivy==2.1.0,kivymd,pillow,requests,hostpython3
        
        presplash.filename = %(source.dir)s/presplash.png
        icon.filename = %(source.dir)s/icon.png
        
        orientation = portrait
        fullscreen = 0
        
        # Android specific
        android.minapi = 21
        android.api = 33
        android.ndk = 25b
        android.sdk = 33
        android.accept_sdk_license = True
        android.arch = arm64-v8a
        
        android.permissions = INTERNET,ACCESS_NETWORK_STATE,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
        
        # Java compatibility fixes
        android.gradle_dependencies = com.android.support:support-v4:28.0.0
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        EOF
    
    - name: Create default icon and presplash
      run: |
        python3 -c "
        from PIL import Image, ImageDraw
        import os
        
        # Créer une icône simple
        size = (512, 512)
        img = Image.new('RGBA', size, (33, 150, 243, 255))  # Bleu Material
        draw = ImageDraw.Draw(img)
        
        # Dessiner un cercle blanc
        margin = 50
        draw.ellipse([margin, margin, size[0]-margin, size[1]-margin], fill=(255, 255, 255, 255))
        
        # Dessiner un cercle plus petit au centre
        center_margin = 150
        draw.ellipse([center_margin, center_margin, size[0]-center_margin, size[1]-center_margin], fill=(33, 150, 243, 255))
        
        img.save('icon.png')
        img.save('presplash.png')
        print('Icônes créées avec succès')
        "
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
    
    - name: Cache Buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}-${{ hashFiles('**/*.py') }}
        restore-keys: |
          buildozer-${{ hashFiles('buildozer.spec') }}-
          buildozer-
    
    - name: Set Android environment variables
      run: |
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_ENV
    
    - name: Initialize Buildozer
      run: |
        buildozer android clean || true
    
    - name: Build APK with Buildozer
      run: |
        # Configuration JVM pour Java 17
        export GRADLE_OPTS="-Dorg.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m"
        export JAVA_OPTS="-Xmx2048m"
        
        # Build APK
        buildozer -v android debug
    
    - name: List generated files
      run: |
        echo "Contenu du répertoire bin:"
        ls -la bin/ || echo "Répertoire bin non trouvé"
        echo "Contenu du répertoire .buildozer:"
        find .buildozer -name "*.apk" -type f || echo "Aucun APK trouvé dans .buildozer"
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: apk-debug
        path: |
          bin/*.apk
          .buildozer/android/platform/build-*/dists/*/bin/*.apk
        retention-days: 30
      if: always()
    
    - name: Upload APK to Release (if tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          bin/*.apk
          .buildozer/android/platform/build-*/dists/*/bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}